
REPL - read-eval-print-loop
		  REPL is a javascript playground (an interactive interpreter to a programming language) that will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from stdin and stdout, respectively, or may be connected to any Node.js stream.

**undefined**
    Every time console.log is executed from the console itself, a line saying undefined is appended to the output log.
    When you run any void function (like console.log) from the console, it also prints out info about the return value, undefined in this case.

    - JavaScript is designed as a dynamic language which means that the return type (string, void, boolean …) of a function's return value is not pre-defined.
    - If a function does not use a return statement or an empty return statement with no value, JavaScript automatically returns undefined. 
    - That means that **in JavaScript every function returns something, at least undefined.**

    So the function console.log() in Chrome console either uses no or an empty return statement, so that the return value of this function is undefined. 
    This function return value also  gets displayed in the console.

    If you're running console.log() from a JS file, this undefined line will not be appended.


This undefined also appears when the following line is written in the console: 
    var name = "venkat"; 

The var statement declares a function-scoped or globally-scoped variable.
    
Variables declared using var are created before any code is executed in a process known as **hoisting**.  
Their initial value is **undefined**.

charset %Charset; #IMPLIED --char encoding of linked resource --  
type %ContentType; #REQUIRED --content type of script language--  
src  %URI;  #IMPLIED  -- URI for an external script --  
defer (defer) #IMPLIED  -- UA may defer execution of script --  

type = content-type [CI]
This attribute specifies the scripting language of the element's contents and overrides the default scripting language. The scripting language is specified as a content type (e.g., "text/javascript").
Authors must supply a value for this attribute.
There is no default value for this attribute.

Always try to have your `script` tag **before** the closing `body` tag, because we can access the HTML elements written above the `script` tag as they are above the JS.

- Also, we can run JS in another file using `script` tag with `src` attribute:

```javascript
<script src="relative path to js file"></script>
```


1. <script> tags must not be empty elements. must have its own closing element

2. Illegal: will be ignored
        <script src="./sampleb.js" />

   3. and in the following code the console.log() will be ignored
    <script src="./sampleb.js">
        console.log('I will not be executed')
    </script>

url:
https://javascript.info/script-async-defer
https://flaviocopes.com/javascript-async-defer/

In modern websites, scripts are often “heavier” than HTML: their download size is larger, and processing time is also longer.
When the browser loads HTML and comes across a <script>...</script> tag, it can’t continue building the DOM.
It must execute the script right now.
The same happens for external scripts <script src="..."></script>:
the browser must wait for the script to download, execute the downloaded script, and only then can it process the rest of the page.
That leads to two important issues:
1. Scripts can’t see DOM elements below them, so they can’t add handlers etc.
2. If there’s a bulky script at the top of the page, it “blocks the page”.  
    Users can’t see the page content till it downloads and runs:

There are some workarounds to that.
For instance, we can put al script at the bottom of the page.
Then it can see elements above it, and it doesn’t block the page content from showing:
But this solution is far from perfect.
For example, the browser notices the script (and can start downloading it)
only after it downloaded the full HTML document.
For long HTML documents, that may be a noticeable delay.
Such things are invisible for people using very fast connections,
but many people in the world still have slow internet speeds and
use a far-from-perfect mobile internet connection.